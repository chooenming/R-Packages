Primary reasons most developers include data in their package is to demonstrate how to use the functions included in the package with the included data
include data that your package uses internally, but not available to somebody who is using the package
When including data in your package consider the fact that your compressed package file should be smaller than 5MB, which is the largest package size that CRAN allows.
If package > 5MB, make sure to inform users in the instructions for downloading and installing the package

Data Objects
- create objects to include in package inside of the global environment
- can include any R object in a package, not just data frames
- make sure in package directory and use use_data() function, listing each object to be included in the package
- names of the objects that pass as arguments to use_data() will be the names of the objects when a user loads the package
- document each data object included in the package
- users can use common R help syntax like ?dataset to find out more info
- can write data documentation in data .R file
- Example: minimap package
    - documentaiton for data frame maple:
        #' Production and farm value of maple products in Canada
        #'
        #' @source Statistics Canada. Table 001-0008 - Production and farm value of
        #'  maple products, annual. \url{http://www5.statcan.gc.ca/cansim/}
        #' @format A data frame with columns:
        #' \describe{
        #'  \item{Year}{A value between 1924 and 2015.}
        #'  \item{Syrup}{Maple products expressed as syrup, total in thousands of gallons.}
        #'  \item{CAD}{Gross value of maple products in thousands of Canadian dollars.}
        #'  \item{Region}{Postal code abbreviation for territory or province.}
        #' }
        #' @examples
        #' \dontrun{
        #'  maple
        #' }
        "maple"
- general schema:
    - informative title describing the object
    - @source tag describing where the data was found
    - @format tag describing the data in each column of the data frame
    - string with the name of the object
- always include a title for a description of a vector or any other object
- if need to elaborate on details of a vector, can include a description in the documentation or @source tag
    #' Postal Abbreviations for Mexico
    #'
    #' @examples
    #' \dontrun{
    #'  mexico_abb
    #' }
    "mexico_abb"

Raw Data
- A common task for R packages is to take raw data from files and to import them into R objects so that they can be analyzed
- might want to include some sample raw data files so can show different methods and options for importing the data
- to include raw data files in the package, should create a directory under inst/extdata in the R package 
- if store a data file in this directory called response.json in inst/extdata and package is named mypackage then a user could access the path to this file with system.file("extdata", "response.json", package = "mypackage")
- include that line of code in the documentation to the package so that users know how to access the raw data file

Internal Data
- Functions in the package may need to have access to data that donâ€™t want users to be able to access
- use use_data() from devtools to add internal data, specify internal = TRUE
- all of the objects pass to use_date(..., internal = TRUE) can be referenced by the same name within R package
- all objects will be saved to one file called R/sysdata.rda.

Data Packages
- There are several packages which were created for the sole purpose of distributing data
- advantages of using package to distirbute data:
    - extremely easy to load into R, user only needs to install and load package
    - allow to document datasets using roxygen2 (cleaner and more programmer-friendly code book)
- disadvantage:
    - data package not accessible to people who are not using R
- if create data package, should document the process that used to obtain, clean and save the data
    - use use_data_raw() function from devtools: create directory inside package called data_raw
    - inside the directory should include any raw files that the data objects in package are derived from
    - include one or more R scripts which import, clean, and save data objects in the package
