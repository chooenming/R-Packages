Web Services for Continuous Integration
- free for R packages that are built in public GitHub repositories
- CI services run every time you push a new set of commits for your package repository
- Both services integrate nicely with GitHub so you can see in GitHub’s pull request pages whether or not your package is building correctly.
- Continuous integration is a strategy for testing new features and changes to your package as often as possible. 
- Web services like Travis and AppVeyor make it possible to re-test your code on different platforms after every git push. 
- Using continuous integration makes it easy for you and for others to simultaneously work on building an R package without breaking package features by mistake.
- Travis
    - test package on Linux
    - To start using Travis go to https://travis-ci.org and sign in with your GitHub account. 
        1. Clicking on your name in the upper right hand corner of the site will bring of a list of your public GitHub repositories with a switch next to each repo. 
        2. If you turn the switch on then the next time you push to that repository Travis will look for a .travis.yml file in the root of the repository, and it will run tests on your package accordingly.
        3. Open up your R console and navigate to your R package repository. 
        4. Now load the devtools package with library(devtools) and enter use_travis() into your R console. This command will set up a basic .travis.yml for your R package. 
        5. You can now add, commit, and push your changes to GitHub, which will trigger the first build of your package on Travis. 
        6. Go back to https://travis-ci.org to watch your package be built and tested at the same time! You may want to make some changes to your .travis.yml file, and you can see all of the options available in https://docs.travis-ci.com/user/languages/r
        7. Once your package has been built for the first time you’ll be able to obtain a badge, which is just a small image generated by Travis which indicates whether you package is building properly and passing all of your tests. 
        8. You should display this badge in the README.md file of your package’s GitHub repository so that you and others can monitor the build status of your package.
- AppVeyor
    - test package on Windows
    - You can start using AppVeyor by going to https://www.appveyor.com/ and signing in with your GitHub account. 
    1. After signing in click on “Projects” in the top navigation bar. If you have any GitHub repositories that use AppVeyor you’ll be able to see them here. 
    2. To add a new project click “New Project” and find the GitHub repo that corresponds to the R package you’d like to test on Windows. 
    3. Click “Add” for AppVeyor to start tracking this repo.
    4. Open up your R console and navigate to your R package repository. 
    5. Now load the devtools package with library(devtools) and enter use_appveyor() into your R console. This command will set up a default appveyor.yml for your R package. 
    6. You can now add, commit, and push your changes to GitHub, which will trigger the first build of your package on AppVeyor. 7. Go back to https://www.appveyor.com/ to see the result of the build. 
    8. You may want to make some changes to your appveyor.yml file, and you can see all of the options available in the https://github.com/krlmlr/r-appveyor/blob/master/README.md
    9. Like Travis, AppVeyor also generates badges that you should add to the README.md file of your package’s GitHub repository.